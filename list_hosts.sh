#!/bin/bash

#ARGUMENTS CHECKS

if (( $#<2 || $#>2 ))
then
        echo -e "\e[92mUsage:\e[97m bash list_hosts.sh 192.168.40.0 255.255.255.0" #green
        exit 0
fi
#--------------------------------------------------------------

#CONVERT DECIMAL ADDRESS TO BINARY
#with padding and without dots

#Conversions dec->bin and bin->dec
dec2bin () {
    num="$1"
    bin=""
    padding=""
    base2=(0 1)
    echo "$num"
    while [ $num > 0 ]
    do
            bin=${base2[$(($num % 2))]}$bin
            num=$(($num / 2))
    done
    if [ $((8 - (${#bin} % 8))) -ne 8 ]; then
            printf -v padding '%*s' $((8 - (${#bin} % 8))) ''
            padding=${padding// /0}
    fi
    echo $padding$bin
}

#Left padding to 8 chars
pad8 () {
    num="$1"
    while [ ${#num} -ne 8 ]
    do
        num="0"+$num
    done
    echo $num
}

#Concatenation
concat () {
    res=""
    for arg in $@
    do
	res=$res+$arg
    done
    echo $res
}

#Converting in binary and padding
dec2bin_pad () {
	echo "$(pad8 $(dec2bin $1))"
}

#Get a part of a network or mask address
getpart () {
	       
	echo $1 |cut -d"." -f$2 # $1=address ; $2=part
}

getpart_dec2bin_pad () {
	echo $(dec2bin_pad $(getpart $1 $2)) # $1=address ; $2=part
}

#Convert network or mask address to binary
convert_to_binary () {
	address=$1
	parts=($(getpart $address 1),$(getpart $address 2),$(getpart $address 3),$(getpart $address 4))
	res=""
	for part in parts
	do
		res="$res$(getpart_dec2bin_pad $part)"
	done
	echo $res
}
#--------------------------------------------------------------

#CONVERTING BINARY ADDRESS TO DECIMAL
#adding dots

bin2dec () {
        echo $((2#$1))
}

getpart_bin2dec () {
        echo $(bin2dec $(getpart $1 $2)) # $1=address ; $2=part
}

convert_to_decimal() {
        address=$1
	parts=($(getpart $address 1),$(getpart $address 2),$(getpart $address 3),$(getpart $address 4))
	res=""
	for part in parts
	do
                res="$res$(getpart_bin2dec $(part))."
	done
	echo ${res:0:$(${#res-1})} #we get rid of last "."

}
#--------------------------------------------------------------

#APPLY MASK

#Logical AND
#AND () {
#        if [ "$1" -e "$2" ]
#	then 
#                echo "$1"
#	else
#		echo "0"
#	fi
#}

#Bitwise logical AND 
#bitwise_AND () {
#	res=""
#       i=0
#	while [ "$i" -l "${#1}" ]
#	do
#		bit=$(AND $({1:$i:1}) $({2:$i:1}))
#                res=$res$bit
#	done
#	echo $res
#}

#apply_mask () {
#	address1=$1
#	address2=$2
#	res=""
#	for i in {1..4}
#	do
#	        res=$res$(bitwise_AND $(getpart_dec2bin_pad $address1 $i) $(getpart_dec2bin_pad $address2 $i)).
#	done
#	res=${res:0:${#res-1}} #we get rid of last "."
#	res=convert_to_decimal $res
#}
#--------------------------------------------------------------

#CODE

network=$(convert_to_binary $1)
mask=$(convert_to_binary $2)
number_of_network_bits=0
while [ $number_of_network_bits != ${#network} ] && [ ${mask:$number_of_network_bits:1} == 0 ]
do
	number_of_network_bits=$number_of_network_bits+1
done
for i in {$(($number_of_network_bits - 1))..$((${#network}-1))}
do
	for j in {0..1}
	do
		res=${network:0:first_bit}$j${network:$((first_bit+1)):${#network}}
	        res=${res:0:8}.${res:8:16}.${res:16:24}.${res:24:32}
		#echo $(convert_to_decimal $res)
	done
done


