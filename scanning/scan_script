#!/bin/bash

#####################
#TESTING PARAMETERS
#####################

if [ $# -ne 1 ]
then
        echo "Wrong number of arguments.. exiting"
        exit -1
elif [ $(id -u) -ne 0 ]
then
        echo "You must run this script as root.. exiting"
        exit -1
fi

script_start=`date +%s`;

#####################
#FUNCTIONS
#####################

open_ports() {
        host=$1
        nmap -sS -p- $host --reason -Pn -n -oN ./$host/nmap/nmap_full_TCP_allports &> /dev/null &
        nmap -sU -A $host --reason --top-ports=20 -Pn -n -oN ./$host/nmap/nmap_UDP &> /dev/null &
        #1000 most well-known ports
        #we were missing ports on 10.11.1.226 without -A

        wait

        unset tasks[$host,"TCP SYN (all) & UDP (1000)"]
        NOW=`date '+%H:%M:%S'` && printf "$fmt" "[$NOW]" "$host" "TCP SYN (all) & UDP (1000)" &
}

versions_scripts() {
        host=$1
        open_TCP_ports=$2
        open_TCP_ports_list=$3
        open_UDP_ports=$4
        open_UDP_ports_list=$5

        if [ $open_TCP_ports -ge 1 ]; then
                tasks[$host,"versions & scripts"]="whatever"
                (nmap -sTCV --version-all -p $open_TCP_ports_list $host -Pn -n -oN ./$host/nmap/nmap_full_TCP_versions_scripts &> /dev/null; unset tasks[$host,"versions & scripts"]) &
        fi

        if [ $open_UDP_ports -ge 1 ]; then
                tasks[$host,"versions & scripts"]="whatever"
                (nmap -sUCV --version-all -p $open_UDP_ports_list $host -Pn -n -oN ./$host/nmap/nmap_UDP_versions_scripts &> /dev/null; unset tasks[$host,"versions & scripts"]) &
        fi

        wait

        NOW=`date '+%H:%M:%S'` && printf "$fmt" "[$NOW]" "$host" "versions & scripts" &
}

os_agressive_detection() {
        host=$1
        open_TCP_ports=$2
        open_TCP_ports_list=$3
        open_UDP_ports=$4
        open_UDP_ports_list=$5

        if [ $open_TCP_ports -ge 1 ] && [ $open_UDP_ports -ge 1 ]; then
                tasks[$host,"OS agressive detection"]="whatever"
                nmap -sT -sU -A --osscan-guess $host -p T:$open_TCP_ports_list,666,U:$open_UDP_ports_list -Pn -n -oN ./$host/000_OS_agressive_detection &> /dev/null; unset tasks]$host,"OS agressive detection"]
                #port 666 is to have at least one closed port. This is needed for OS detection.
        elif [ $open_TCP_ports -ge 1 ]; then
                tasks[$host,"OS agressive detection"]="whatever"
                nmap -sT -A --osscan-guess $host -p $open_TCP_ports_list,666 -Pn -n -oN ./$host/000_OS_agressive_detection &> /dev/null; unset tasks[$host,"OS agressive detection"]
        fi

        NOW=`date '+%H:%M:%S'` && printf "$fmt" "[$NOW]" "$host" "OS agressive detection"
}

tcp_vuln_scan() {
        host=$1
        open_TCP_ports=$2
        open_TCP_ports_list=$3

        if [ $open_TCP_ports -ge 1 ]; then
                tasks[$host,"TCP vulnerability scan"]="whatever"
                nmap -sT --script +vuln -p $open_TCP_ports_list $host -Pn -n -oN ./$host/000_TCP_vuln_scan &> /dev/null && NOW=`date '+%H:%M:%S'` && printf "$fmt" "[$NOW]" "$host" "TCP vulnerability scan"; unset tasks[$host,"TCP vulnerability scan"]
        fi

        NOW=`date '+%H:%M:%S'` && printf "$fmt" "[$NOW]" "$host" "TCP vulnerability scan"
}

generate_report() {
        host=$1

        echo "" >> ./$host/000_nmap_report
        echo "Report for $host" > ./$host/000_nmap_report

        if [ $open_TCP_ports -ge 1 ]; then
                echo "--------------------------------------------" >> ./$host/000_nmap_report
                echo -e "\e[91m\e[1mTCP VERSIONS AND SCRIPTS\e[0m\e[92m" >> ./$host/000_nmap_report
                echo "" >> ./$host/000_nmap_report
                cat ./$host/nmap/nmap_full_TCP_versions_scripts >> ./$host/000_nmap_report
        fi

        if [ $open_UDP_ports -ge 1 ]; then
                echo "--------------------------------------------" >> ./$host/000_nmap_report
                echo -e "\e[91m\e[1mUDP VERSIONS AND SCRIPTS\e[0m\e[92m" >> ./$host/000_nmap_report
                echo "" >> ./$host/000_nmap_report
                cat ./$host/nmap/nmap_UDP_versions_scripts >> ./$host/000_nmap_report
        fi

        #NOW=`date '+%H:%M:%S'` && printf "$fmt" "[$NOW]" "$host" "nmap report"
}

netcat_connect() {
        host=$1
        port=$2
        nc -nvvC $host $port -w 60 2>&1 << NCCOMMANDS
a
b
c


aaa
bbbbbbbbb
cccccccccccccccc


NCCOMMANDS
}

netcat_connect_all() {
        host=$1
        ports=`grep "/tcp" ./$host/nmap/nmap_full_TCP_allports |cut -d" " -f 1` #we try to connect to filtered/closed ports too
        ports_number=`grep "/tcp" ./$host/nmap/nmap_full_TCP_allports |cut -d" " -f 1 |wc -l`
        if [ $ports_number -ne 0 ]; then
                tasks[$host,"netcat TCP ports"]="whatever"
                echo -e "\e[91m\e[1mTCP PORTS\e[0m" > ./$host/000_netcat_TCP_ports
                for port in $ports; do #we try to connect to filtered/closed ports too
                        temp=`netcat_connect $host $port` && printf "TCP PORT $port\n$tmp\n-----\n" >> ./$host/000_netcat_TCP_ports &
                        #sleep 2
                done

                wait
                NOW=`date '+%H:%M:%S'` && printf "$fmt" "[$NOW]" "$host" "netcat TCP ports"
                unset tasks[$host,"netcat TCP ports"]
        fi
}

netcat_connect_udp() {
        host=$1
        port=$2
        nc -nvvC -u $host $port -w 60 2>&1 << NCCOMMANDS
a
b
c


aaa
bbbbbbbbb
cccccccccccccccc


NCCOMMANDS
}

netcat_connect_udp_all() {
        host=$1
        ports=`grep "/udp" ./$host/nmap/nmap_UDP |cut -d / -f 1` #we try to connect to filtered/closed ports too
        ports_number=`grep "/udp" ./$host/nmap/nmap_UDP |cut -d / -f 1 |wc -l`
        if [ $ports_number -ne 0 ]; then
                tasks[$host,"netcat UDP ports"]="whatever"
                echo -e "\e[91m\e[1mUDP PORTS\e[0m" >> ./$host/000_netcat_UDP_ports
                for port in $ports; do
                        temp=`netcat_connect_udp $host $port` && printf "UDP PORT $port\n$temp\n-----\n" >> ./$host/000_netcat_UDP_ports &
                        #sleep 2
                done
                wait
                NOW=`date '+%H:%M:%S'` && printf "$fmt" "[$NOW]" "$host" "netcat UDP ports"
                unset tasks[$host,"netcat UDP ports"]
        fi
}

smb_enum() {
        host=$1
        open_TCP_ports_list=$2
        if [[ $open_TCP_ports_list == *"445"* ]] || [[ $open_TCP_ports_list == *"139"* ]]; then
                tasks[$host,"enum4linux"]="whatever"
                (enum4linux -v $host > ./$host/139_445_enum4linux 2>&1 && NOW=`date '+%H:%M:%S'` && printf "$fmt" "[$NOW]" "$host" "enum4linux"; unset tasks[$host,"enum4linux"]) &
                tasks[$host,"smbclient listing"]="whatever"
                (smbclient -L\\ -N -I $host 2>&1 > ./$host/139_445_listing && NOW=`date '+%H:%M:%S'` && printf "$fmt" "[$NOW]" "$host" "smbclient listing"; unset tasks[$host,"smbclient listing"]) &
        fi

        if [[ $open_TCP_ports_list == *"445"* ]]; then
                tasks[$host,":445 smbmap"]="whatever"
                (smbmap -u null -p "" -H $host -P 445 2>&1 > ./$host/445_smbmap && NOW=`date '+%H:%M:%S'` && printf "$fmt" "[$NOW]" "$host" ":445 smbmap"; unset tasks[$host,":445 smbmap"]) &
                tasks[$host,":445 smbclient NULL sessions"]="whatever"
                (connect_shares $host "445" > ./$host/445_null_sessions && NOW=`date '+%H:%M:%S'` && printf "$fmt" "[$NOW]" "$host" ":445 smbclient NULL sessions"; unset tasks[$host,":445 smbclient NULL sessions"]) &
        fi

        if [[ $open_TCP_ports_list == *"139"* ]]; then
                tasks[$host,":139 smbmap"]="whatever"
                (smbmap -u null -p "" -H $host -P 139 2>&1 > ./$host/139_smbmap && NOW=`date '+%H:%M:%S'` && printf "$fmt" "[$NOW]" "$host" ":139 smbmap"; unset tasks[$host,":139 smbmap"]) &
                tasks[$host,":139 smbclient NULL sessions"]="whatever"
                (connect_shares $host "139" > ./$host/139_null_sessions && NOW=`date '+%H:%M:%S'` && printf "$fmt" "[$NOW]" "$host" ":139 smbclient NULL sessions"; unset tasks[$host,":139 smbclient NULL sessions"]) &
        fi

        wait
}

http_enum() {
        host=$1
        for port in `grep "open" ./$host/nmap/nmap_full_TCP_versions_scripts |grep /tcp |grep -i http |grep -i -v https |cut -d / -f 1`; do
                tasks[$host,":$port dirsearch (common list, recursion 2)"]="whatever"
                (python3 /home/kali/Desktop/dirsearch/dirsearch.py -u http://$host:$port/ -e "txt,html,php,asp,aspx,jsp,bak,old,cgi" -w /usr/share/seclists/Discovery/Web-Content/common.txt -r -t 100 -F -R 2 -f --plain-text-report=./$host/${port}_dirsearch_common.txt &> /dev/null && NOW=`date '+%H:%M:%S'` && printf "$fmt" "[$NOW]" "$host" ":$port dirsearch (common list, recursion 2)"; unset tasks[$host,":$port dirsearch (common list, recursion 2)"]) &
                tasks[$host,":$port dirsearch (medium list, no recursion)"]="whatever"
                (python3 /home/kali/Desktop/dirsearch/dirsearch.py -u http://$host:$port/ -e "txt,html,php,asp,aspx,jsp,bak,old,cgi" -w /usr/share/dirbuster/wordlists/directory-list-2.3-medium.txt -t 100 -F -f --plain-text-report=./$host/${port}_dirsearch_medium.txt &> /dev/null && NOW=`date '+%H:%M:%S'` && printf "$fmt" "[$NOW]" "$host" ":$port dirsearch (medium list, no recursion)"; unset tasks[$host,":$port dirsearch (medium list, no recursion)"]) &
                tasks[$host,":$port nikto"]="whatever"
                (nikto -ask=no -h http://$host:$port/ -output ./$host/${port}_nikto.txt &> /dev/null && NOW=`date '+%H:%M:%S'` && printf "$fmt" "[$NOW]" "$host" ":$port nikto"; unset tasks[$host,":$port nikto"]) &
        done

        wait
}

https_enum() {
        host=$1
        for port in `grep "open" ./$host/nmap/nmap_full_TCP_versions_scripts |grep /tcp |grep -i https |cut -d / -f 1`; do
                tasks[$host,":$port gobuster (common list, no recursion)"]="whatever"
                (gobuster dir -x "txt,html,php,asp,aspx,jsp,bak,old,cgi" -r -k -u https://$host:$port/ -z -q -t 100 -v -w /usr/share/seclists/Discovery/Web-Content/common.txt -o ./$host/${port}_gobuster_common.txt &> /dev/null && NOW=`date '+%H:%M:%S'` && printf "$fmt" "[$NOW]" "$host" ":$port gobuster (common list, no recursion)"; unset tasks[$host,":$port gobuster (common list, no recursion)"]) &

                tasks[$host,":$port gobuster (medium list, no recursion)"]="whatever"
                (gobuster dir -x "txt,html,php,asp,aspx,jsp,bak,old,cgi" -r -k -u https://$host:$port/ -z -q -t 100 -v -w /usr/share/dirbuster/wordlists/directory-list-2.3-medium.txt -o ./$host/${port}_gobuster_medium.txt &> /dev/null && NOW=`date '+%H:%M:%S'` && printf "$fmt" "[$NOW]" "$host" ":$port gobuster (medium list, no recursion)"; unset tasks[$host,":$port gobuster (medium list, no recursion)"]) &

                tasks[$host,":$port nikto"]="whatever"
                (nikto -ask=no -h https://$host:$port/ -output ./$host/${port}_nikto.txt &> /dev/null && NOW=`date '+%H:%M:%S'` && printf "$fmt" "[$NOW]" "$host" ":$port nikto"; unset tasks[$host,":$port nikto"]) &
        done

        wait
}


connect_shares() {
        host=$1
        port=$2

        echo ""
        echo "Port $port: connecting to IPC$ share..."
        smbclient //$host/IPC$ -N -p$port -q15 -c 'dir' 2>&1

        echo ""
        echo "Port $port: connecting to C$ share..."
        smbclient //$host/C$ -N -p$port -q15 -c 'dir' 2>&1

        echo ""
        echo "port $port: connecting to Admin$ share..."
        smbclient //$host/Admin$ -N -p$port -q15 -c 'dir' 2>&1
}

#####################
#MAIN FUNCTION
#####################

scan() {

#INITIALIZATION/CREATING DIRS

        host=$1
        tasks=$2
        host_start=`date +%s`

        mkdir $host
        mkdir ./$host/nmap
        touch ./$host/0000-----SCAN-STILL-RUNNING-----0000
        wait

#OPEN PORTS SCANS

        open_ports $host

#############################################################################################################

#LISTS OF OPEN PORTS

        #number of open TCP ports
        open_TCP_ports=`grep "open" ./$host/nmap/nmap_full_TCP_allports |grep tcp |wc -l`

        #number of open UDP ports
        open_UDP_ports=`grep "open" ./$host/nmap/nmap_UDP |grep udp |wc -l`

        #list of open TCP ports
        open_TCP_ports_list=""
        for port in `grep "open" ./$host/nmap/nmap_full_TCP_allports |grep tcp |cut -d / -f 1`; do open_TCP_ports_list="$open_TCP_ports_list$port,"; done
        open_TCP_ports_list=`echo $open_TCP_ports_list |sed 's/.$//'` #removing last ","

        #list of open UDP ports
        open_UDP_ports_list=""
        for port in `grep "open" ./$host/nmap/nmap_UDP |grep udp |cut -d / -f 1`; do open_UDP_ports_list="$open_UDP_ports_list$port,"; done
        open_UDP_ports_list=`echo $open_UDP_ports_list |sed 's/.$//'` #removing last ","

#VERSIONS AND SCRIPTS SCANS

        versions_scripts $host $open_TCP_ports $open_TCP_ports_list $open_UDP_ports $open_UDP_ports_list

#############################################################################################################

#OS AGRESSIVE DETECTION

        os_agressive_detection $host $open_TCP_ports $open_TCP_ports_list $open_UDP_ports $open_UDP_ports_list &

#TCP VULNERABILITY SCAN

        tcp_vuln_scan $host $open_TCP_ports $open_TCP_ports_list &

#WRITING NMAP_REPORT

        generate_report $host &

#NETCAT TCP PORTS

        netcat_connect_all $host &

#NETCAT UDP PORTS

        netcat_connect_udp_all $host &

        if [ $open_TCP_ports -ge 1 ]; then
#SMB ENUMERATION

        smb_enum $host $open_TCP_ports_list &

#DIRSEARCH AND NIKTO ON HTTP PORTS

        http_enum $host &

#GOBUSTER AND NIKTO ON HTTPS PORTS (dirsearch doesn't support ssl)
        
        https_enum $host &
        fi

        wait
#############################################################################################################

#TIME SPENT ENUMERATING HOST

        host_end=`date +%s`
        #echo -e "\e[93m\e[1m$host \e[34mscanned in $((host_end - host_start)) seconds\e[0m" >> ./$host/_LOGS
        #echo -e "\e[93m\e[1m$host \e[34mscanned in $((host_end - host_start)) seconds\e[0m"

        #echo "$open_TCP_ports open TCP ports: $open_TCP_ports_list" >> ./$host/_LOGS
        #echo "$open_UDP_ports open UDP ports: $open_UDP_ports_list" >> ./$host/_LOGS
        #echo -e "\e[34m\e[1mTCP: $open_TCP_ports_list\e[0m"
        #echo -e "\e[34m\e[1mUDP: $open_UDP_ports_list\e[0m"
        #echo -e "\e[34m\e[1mResults in \e[93m\e[1m$PWD/$host\e[0m"

        fmt="| \e[93m\e[1m%-10s\e[0m | \e[33m%-15s\e[0m | \e[1m\e[95m%-46s\e[0m | \e[1m\e[93m%s\e[0m\n"
        NOW=`date '+%H:%M:%S'` && printf "$fmt" "[$NOW]" "$host" "ALL DONE ($((host_end - host_start)) seconds)" "-> $PWD/$host/" &
                                                                                              #backgrounding for protection
                                                                                              #against race condition on output format
                                                                                              #with other hosts
        fmt="| \e[93m\e[1m%-10s\e[0m | \e[33m%-15s\e[0m | %-27s |\n"

        rm ./$host/0000-----SCAN-STILL-RUNNING-----0000
        finish[$host]="1"
}

display_tasks() {
        host=$1
        while [[ finish[$host] -ne "1" ]]; do
                #read -n 1;
                i=0
                tmp=""
                for KEY in "${!tasks[@]}"; do
                        if [[ $KEY == "$host"* ]]; then
                                ((i=i+1))
                                KEY=`echo $KEY |cut -d"," -f2`
                                tmp="$tmp $KEY,"
                        fi
                done
                tmp=`echo $tmp |sed 's/.$//'`; #removing last ","
                NOW=`date '+%H:%M:%S'`;
                tmp="[$NOW] $i running tasks on $host: $tmp"
                if [[ $i != 0 ]]; then
                        echo "$tmp" >> _LOGS
                fi
                sleep 5
        done
}
#####################
#MAIN CODE
#####################

#INITIALIZATION

clear;

rm _LOGS
touch _LOGS;

hosts=$1;

printf "\e[95m\e[1m";
figlet scan_script; #banner
echo "";
echo "";
printf "\e[0m";

NOW=`date '+%H:%M:%S'`;
echo -e "<> \e[1mStarting at $NOW\e[0m";

list_of_hosts="\e[93m<>\e[1m Hosts: ";
for host in `cat $hosts`; do list_of_hosts="$list_of_hosts\e[0m\e[33m$host, "; done
list_of_hosts=`echo $list_of_hosts |sed 's/.$//'`; #removing last ","
list_of_hosts="$list_of_hosts\e[0m";
echo -e "$list_of_hosts";

echo "";

fmt="|\e[1m%-12s\e[0m|\e[1m%-17s\e[0m|\e[1m%-48s\e[0m|\n";

printf "$fmt" " time " " IP address " " type of scan completed ";
printf "$fmt" "------------" "-----------------" "------------------------------------------------";

#SCANNING ALL HOSTS IN PARALLEL

fmt="| \e[93m\e[1m%-10s\e[0m | \e[33m%-15s\e[0m | %-46s |\n"; #used in scan() function!!!

declare -A tasks;
declare -A finish;

for host in $(cat $1); do
        finish[$host]="0"
        tasks[$host,"TCP SYN (all) & UDP (1000)"]="whatever"
        display_tasks $host &
        scan $host $tasks &
done
wait;

#TIME SPENT

sleep 1;
echo "";
script_end=`date +%s`;
echo -e "<> \e[1mScript completed in $((script_end - script_start)) seconds\e[0m";
echo "";

rm _LOGS;
