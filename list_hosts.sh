#!/bin/bash

#https://github.com/Plotkine/Pentesting

#Possible improvements:
#- apply mask to host in case the host is not written with 0's in host part
#- detect invalid mask (eg. 111111111101000000000000)
#ARGUMENTS CHECKS

if (( $#<2 || $#>2 ))
then
        echo -e "\e[92mUsage:\e[97m bash list_hosts.sh 192.168.40.0 255.255.255.0" #green
        exit 0
fi
#--------------------------------------------------------------

#CONVERT DECIMAL ADDRESS TO BINARY
#with padding and without dots

#Conversions dec->bin and bin->dec
dec2bin () {
    num="$1"
    bin=""
    base2=(0 1)
    while [ "$num" -gt 0 ];
    do
            bin=${base2[$(($num % 2))]}$bin
            num=$(($num / 2))
    done
    echo $bin
}

#Left padding to 8 chars
pad8 () {
    num="$1"
    while [ ${#num} -ne 8 ]
    do
        num="0$num"
    done
    echo $num
}

#Converting in binary and padding
dec2bin_pad () {
	echo "$(pad8 $(dec2bin $1))"
}

#Get a part of a network or mask address
getpart () {
	echo $1 |cut -d"." -f$2 # $1=address ; $2=part
}

getpart_dec2bin_pad () {
	echo "$(dec2bin_pad $(getpart $1 $2))" # $1=address ; $2=part
}

#Convert address to binary
convert_to_binary () {
	res=""
	for i in {1..4}
	do      
		res="$res$(getpart_dec2bin_pad $1 $i)" # $1=address
	done
	echo $res
}
#--------------------------------------------------------------

#CONVERTING BINARY ADDRESS TO DECIMAL
#adding dots

convert_to_decimal() {
	res=""
	for i in {0..2}
	do
		res="$res$((2#${1:$((i*8)):8}))." # $((#2<number>)) = binary conversion
	done
	echo "$res$((2#${1:24:8}))"
}
#--------------------------------------------------------------
:'
#APPLY MASK

#Logical AND
AND () {
        if [ "$1" -e "$2" ]
	then 
                echo "$1"
	else
		echo "0"
	fi
}

#Bitwise logical AND 
bitwise_AND () {
	res=""
       i=0
	while [ "$i" -l "${#1}" ]
	do
		bit=$(AND $({1:$i:1}) $({2:$i:1}))
                res=$res$bit
	done
	echo $res
}

apply_mask () {
	address1=$1
	address2=$2
	res=""
	for i in {1..4}
	do
	        res=$res$(bitwise_AND $(getpart_dec2bin_pad $address1 $i) $(getpart_dec2bin_pad $address2 $i)).
	done
	res=${res:0:${#res-1}} #we get rid of last "."
	res=convert_to_decimal $res
}
'
#--------------------------------------------------------------

#CODE
network=$(convert_to_binary $1)
mask=$(convert_to_binary $2)
number_of_network_bits=0
while [ $number_of_network_bits != ${#mask} ] && [ ${mask:$number_of_network_bits:1} == 1 ]
do
	number_of_network_bits=$((number_of_network_bits+1))
done

output_hosts() {
	if [[ "$2" ==  "${#1}" ]] #index out of scope
	then
		echo "$(convert_to_decimal $1)"
	else
		output_hosts $1 $(($2+1)) #fixing the bit at $index
                
		#length before index = $index
		#length after index=(length of the address)-(length before index)-1
		new_address=${1:0:$2}1${1:$(($2+1)):$((${#1}-$index-1))}
		output_hosts $new_address $(($2+1))
	fi
}

output_hosts $network $number_of_network_bits
