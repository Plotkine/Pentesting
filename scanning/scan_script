#!/bin/bash

#####################
#TESTING PARAMETERS
#####################

if [ $# -ne 1 ]
then
        echo "Wrong number of arguments.. exiting"
        exit -1
elif [ $(id -u) -ne 0 ]
then
        echo "You must run this script as root.. exiting"
        exit -1
fi

script_start=`date +%s`;

#####################
#FUNCTIONS
#####################

netcat_connect() {
        host=$1
        port=$2
        nc -nvC -q60 $host $port 2>&1 &<< NCCOMMANDS #-q60 = close after 60 seconds
a
b
c


aaa
bbbbbbbbb
cccccccccccccccc


NCCOMMANDS
}

netcat_connect_udp() {
        host=$1
        port=$2
        nc -nvC -u -q60 $host $port 2>&1 &<< NCCOMMANDS #-q60 = close after 60 seconds
a
b
c


aaa
bbbbbbbbb
cccccccccccccccc


NCCOMMANDS
}

connect_shares() {
        host=$1
        port=$2

        echo ""
        echo "Port $port: connecting to IPC$ share..."
        smbclient //$host/IPC$ -N -p$port -q15 2>&1 << SMBCLIENTCOMMANDS
dir
exit
SMBCLIENTCOMMANDS

        echo ""
        echo "Port $port: connecting to C$ share..."
        smbclient //$host/C$ -N -p$port -q15 2>&1 << SMBCLIENTCOMMANDS
dir
exit
SMBCLIENTCOMMANDS

        echo ""
        echo "port $port: connecting to Admin$ share..."
        smbclient //$host/Admin$ -N -p$port << SMBCLIENTCOMMANDS
dir
exit
SMBCLIENTCOMMANDS
}

scan() {
        host=$1
        host_start=`date +%s`

        mkdir $host
        mkdir ./$host/nmap

#OPEN PORTS SCANS
        sudo nmap -sS -p- $host --reason -Pn -n > ./$host/nmap/nmap_full_TCP_allports && NOW=`date '+%H:%M:%S'` && printf "$fmt" "[$NOW]" "$host" "TCP SYN (all)" &
        sudo nmap -sU -A $host --reason --top-ports=20 -Pn -n > ./$host/nmap/nmap_UDP && NOW=`date '+%H:%M:%S'` && printf "$fmt" "[$NOW]" "$host" "UDP (1000)" & #1000 most well-known ports
        #we were missing ports on 10.11.1.226 without -A
        
        wait
#############################################################################################################

#EXTRACTING LISTS OF OPEN PORTS
        #number of open TCP ports
        open_TCP_ports=`cat ./$host/nmap/nmap_full_TCP_allports |grep open |grep tcp |wc -l`
        
        #list of open TCP ports
        open_TCP_ports_list=""
        for port in `cat ./$host/nmap/nmap_full_TCP_allports |grep open |grep tcp |cut -d / -f 1`; do open_TCP_ports_list="$open_TCP_ports_list$port,"; done
        open_TCP_ports_list=`echo $open_TCP_ports_list |sed 's/.$//'` #removing last ","

        #number of open UDP ports
        open_UDP_ports=`cat ./$host/nmap/nmap_UDP |grep open |grep udp |wc -l`

        #list of open UDP ports
        open_UDP_ports_list=""
        for port in `cat ./$host/nmap/nmap_UDP |grep open |grep udp |cut -d / -f 1`; do open_UDP_ports_list="$open_UDP_ports_list$port,"; done
        open_UDP_ports_list=`echo $open_UDP_ports_list |sed 's/.$//'` #removing last ","

#VERSIONS AND SCRIPTS SCANS
        if [ $open_TCP_ports -ge 1 ]; then
                sudo nmap -sTCV --version-all -p $open_TCP_ports_list $host -Pn -n > ./$host/nmap/nmap_full_TCP_versions_scripts && NOW=`date '+%H:%M:%S'` && printf "$fmt" "[$NOW]" "$host" "TCP versions & scripts" &
        fi

        if [ $open_UDP_ports -ge 1 ]; then
                sudo nmap -sUCV --version-all -p $open_UDP_ports_list $host -Pn -n > ./$host/nmap/nmap_UDP_versions_scripts && NOW=`date '+%H:%M:%S'` && printf "$fmt" "[$NOW]" "$host" "UDP versions & scripts" &
        fi

#OS AGRESSIVE DETECTION
        if [ $open_TCP_ports -ge 1 ] && [ $open_UDP_ports -ge 1 ]; then
                sudo nmap -sT -sU -A --osscan-guess $host -p T:$open_TCP_ports_list,U:$open_UDP_ports_list -Pn -n > ./$host/nmap/nmap_OS_agressive_detection &
        elif [ $open_TCP_ports -ge 1 ]; then
                sudo nmap -sT -A --osscan-guess $host -p $open_TCP_ports_list -Pn -n > ./$host/nmap/nmap_OS_agressive_detection && NOW=`date '+%H:%M:%S'` && printf "$fmt" "[$NOW]" "$host" "OS agressive detection" &
        fi

#TCP VULNERABILITY SCAN
        #if [ $open_TCP_ports -ge 1 ] && [ $open_UDP_ports -ge 1 ]; then
        #        sudo nmap -sT --script +vuln -p $open_TCP_ports_list $host -Pn -n > ./$host/nmap/nmap_full_TCP_vulns && NOW=`date '+%H:%M:%S'` && printf "$fmt" "[$NOW]" "$host" "vulnerability scan" &
        #elif [ $open_TCP_ports -ge 1 ]; then
        if [ $open_TCP_ports -ge 1 ]; then
                sudo nmap -sT --script +vuln -p $open_TCP_ports_list $host -Pn -n > ./$host/nmap/nmap_full_TCP_vulns && NOW=`date '+%H:%M:%S'` && printf "$fmt" "[$NOW]" "$host" "TCP vulnerabilities" &
        fi

        wait
#############################################################################################################

#WRITING NMAP_REPORT
        echo "$host" > ./$host/nmap_report
        echo "" >> ./$host/nmap_report

        if [ $open_TCP_ports -ge 1 ]; then
                echo "--------------------------------------------" >> ./$host/nmap_report
                echo -e "\e[91m\e[1mTCP VERSIONS AND SCRIPTS\e[0m\e[92m" >> ./$host/nmap_report
                echo "" >> ./$host/nmap_report
                cat ./$host/nmap/nmap_full_TCP_versions_scripts >> ./$host/nmap_report
        fi

        if [ $open_UDP_ports -ge 1 ]; then
                echo "--------------------------------------------" >> ./$host/nmap_report
                echo -e "\e[91m\e[1mUDP VERSIONS AND SCRIPTS\e[0m\e[92m" >> ./$host/nmap_report
                echo "" >> ./$host/nmap_report
                cat ./$host/nmap/nmap_UDP_versions_scripts >> ./$host/nmap_report
        fi

        if [ $open_TCP_ports -ge 1 ] || [ $open_UDP_ports -ge 1 ]; then
                echo "--------------------------------------------" >> ./$host/nmap_report
                echo -e "\e[91m\e[1mOS AGRESSIVE DETECTION\e[0m\e[92m" >> ./$host/nmap_report
                echo "" >> ./$host/nmap_report
                cat ./$host/nmap/nmap_OS_agressive_detection >> ./$host/nmap_report
        fi

        if [ $open_TCP_ports -ge 1 ]; then
                echo "--------------------------------------------" >> ./$host/nmap_report
                echo -e "\e[91m\e[1mTCP VULNERABILITY ASSESSMENT\e[0m\e[92m" >> ./$host/nmap_report
                echo "" >> ./$host/nmap_report
                cat ./$host/nmap/nmap_full_TCP_vulns >> ./$host/nmap_report
        fi

        wait

        NOW=`date '+%H:%M:%S'` && printf "$fmt" "[$NOW]" "$host" "Writing nmap report"
#############################################################################################################

#NETCAT TCP PORTS
        if [ $open_TCP_ports -ge 1 ]; then
                echo -e "\e[91m\e[1mTCP PORTS\e[0m" > ./$host/netcat_TCP_ports
                for port in `cat ./$host/nmap/nmap_full_TCP_versions_scripts |grep open |grep /tcp |cut -d / -f 1`; do
                        temp=`netcat_connect $host $port` && echo "TCP PORT $port" >> ./$host/netcat_TCP_ports && echo $temp >> ./$host/netcat_TCP_ports && echo "-----" >> ./$host/netcat_TCP_ports &
                        sleep 2
                done
                wait
                NOW=`date '+%H:%M:%S'` && printf "$fmt" "[$NOW]" "$host" "netcat TCP ports"
        fi

#NETCAT UDP PORTS
        if [ $open_UDP_ports -ge 1 ]; then
                echo "" >> ./$host/netcat_UDP_ports
                echo -e "\e[91m\e[1mUDP PORTS\e[0m" >> ./$host/netcat_UDP_ports
                for port in `cat ./$host/nmap/nmap_UDP_versions_scripts |grep open |grep /udp |cut -d / -f 1`; do
                        temp=`netcat_connect_udp $host $port` && echo "UDP PORT $port" >> ./$host/netcat_UDP_ports && echo $temp >> ./$host/netcat_UDP_ports && echo "-----" >> ./$host/netcat_UDP_ports &
                        sleep 2
                done
                wait
                NOW=`date '+%H:%M:%S'` && printf "$fmt" "[$NOW]" "$host" "netcat UDP ports"
        fi

        wait
#############################################################################################################

        if [ $open_TCP_ports -ge 1 ]; then
#SMB ENUMERATION
                if [[ $open_TCP_ports_list == *"445"* ]] || [[ $open_TCP_ports_list == *"139"* ]]; then
                        sudo enum4linux $host > ./$host/enum4linux 2>&1 && NOW=`date '+%H:%M:%S'` && printf "$fmt" "[$NOW]" "$host" "enum4linux" &
                        sudo smbclient -L\\ -N -I $host 2>&1 > ./$host/smbclient_list_shares && NOW=`date '+%H:%M:%S'` && printf "$fmt" "[$NOW]" "$host" "smbclient listing" &
                fi

                if [[ $open_TCP_ports_list == *"445"* ]]; then
                        sudo smbmap -u null -p "" -H $host -P 445 2>&1 > ./$host/445_smbmap && NOW=`date '+%H:%M:%S'` && printf "$fmt" "[$NOW]" "$host" "[:445] smbmap" &
                        connect_shares $host "445" > ./$host/445_null_sessions && NOW=`date '+%H:%M:%S'` && printf "$fmt" "[$NOW]" "$host" "[:445] smbclient NULL sessions" &
                fi

                if [[ $open_TCP_ports_list == *"139"* ]]; then
                        sudo smbmap -u null -p "" -H $host -P 139 2>&1 > ./$host/139_smbmap && NOW=`date '+%H:%M:%S'` && printf "$fmt" "[$NOW]" "$host" "[:139] smbmap" &
                        connect_shares $host "139" > ./$host/139_null_sessions && NOW=`date '+%H:%M:%S'` && printf "$fmt" "[$NOW]" "$host" "[:139] smbclient NULL sessions" &
                fi

#DIRSEARCH AND NIKTO ON HTTP PORTS
                for port in `cat ./$host/nmap/nmap_full_TCP_versions_scripts |grep open |grep /tcp |grep -i http |grep -i -v https |cut -d / -f 1`; do

                        sudo python3 /home/kali/Desktop/dirsearch/dirsearch.py -u http://$host:$port/ -e "txt,html,php,asp,aspx,jsp,bak,old,cgi" -w /usr/share/seclists/Discovery/Web-Content/common.txt -r -t 100 -F -R 2 -f > ./$host/${port}_dirsearch_common.txt && NOW=`date '+%H:%M:%S'` && printf "$fmt" "[$NOW]" "$host" "[:$port] dirsearch (common list, recursion 2)" &
                        sudo python3 /home/kali/Desktop/dirsearch/dirsearch.py -u http://$host:$port/ -e "txt,html,php,asp,aspx,jsp,bak,old,cgi" -w /usr/share/dirbuster/wordlists/directory-list-2.3-medium.txt -t 100 -F -f > ./$host/${port}_dirsearch_medium.txt && NOW=`date '+%H:%M:%S'` && printf "$fmt" "[$NOW]" "$host" "[:$port] dirsearch (medium list, no recursion)" &

                        nikto -ask=no -h http://$host:$port/ > ./$host/${port}_nikto.txt && NOW=`date '+%H:%M:%S'` && printf "$fmt" "[$NOW]" "$host" "[:$port] nikto" &
                done

#GOBUSTER AND NIKTO ON HTTPS PORTS (dirsearch doesn't support ssl)
                for port in `cat ./$host/nmap/nmap_full_TCP_versions_scripts |grep open |grep /tcp |grep -i https |cut -d / -f 1`; do
                        gobuster dir -x "txt,html,php,asp,aspx,jsp,bak,old,cgi" -r -k -u https://$host:$port/ -t 100 -w /usr/share/seclists/Discovery/Web-Content/common.txt > ./$host/${port}_gobuster_common.txt && NOW=`date '+%H:%M:%S'` && printf "$fmt" "[$NOW]" "$host" "[:$port] gobuster (common list, no recursion)" &
                        gobuster dir -x "txt,html,php,asp,aspx,jsp,bak,old,cgi" -r -k -u https://$host:$port/ -t 100 -w /usr/share/dirbuster/wordlists/directory-list-2.3-medium.txt > ./$host/${port}_gobuster_medium.txt && NOW=`date '+%H:%M:%S'` && printf "$fmt" "[$NOW]" "$host" "[:$port] gobuster (medium list, no recursion)" &

                        nikto -ask=no -h https://$host:$port/ > ./$host/${port}_nikto.txt && NOW=`date '+%H:%M:%S'` && printf "$fmt" "[$NOW]" "$host" "[:$port] nikto" &
                done
        fi
        wait
#############################################################################################################

#TIME SPENT ENUMERATING HOST

        #echo ""

        host_end=`date +%s`
        echo -e "\e[93m\e[1m$host \e[34mscanned in $((host_end - host_start)) seconds\e[0m" >> ./$host/LOGS
        #echo -e "\e[93m\e[1m$host \e[34mscanned in $((host_end - host_start)) seconds\e[0m"

        echo "$open_TCP_ports open TCP ports: $open_TCP_ports_list" >> ./$host/LOGS
        echo "$open_UDP_ports open UDP ports: $open_UDP_ports_list" >> ./$host/LOGS
        #echo -e "\e[34m\e[1mTCP: $open_TCP_ports_list\e[0m"
        #echo -e "\e[34m\e[1mUDP: $open_UDP_ports_list\e[0m"
        #echo -e "\e[34m\e[1mResults in \e[93m\e[1m$PWD/$host\e[0m"

        fmt="| \e[93m\e[1m%-10s\e[0m | \e[33m%-15s\e[0m | \e[1m\e[95m%-27s\e[0m | \e[1m\e[93m%s\e[0m\n"
        NOW=`date '+%H:%M:%S'` && printf "$fmt" "[$NOW]" "$host" "ALL DONE ($((host_end - host_start)) seconds)" "-> $PWD/$host/" &
                                                                                              #backgrounding for protection
                                                                                              #against race condition on output format
                                                                                              #with other hosts
        fmt="| \e[93m\e[1m%-10s\e[0m | \e[33m%-15s\e[0m | %-27s |\n"

        #echo ""
}

#####################
#MAIN CODE
#####################

clear;

hosts=$1

printf "\e[95m\e[1m"
figlet scan_script; #banner
echo "";
echo "";
printf "\e[0m"

NOW=`date '+%H:%M:%S'`;
echo -e "<> \e[1mStarting at $NOW\e[0m";

list_of_hosts="\e[93m<>\e[1m Hosts: "
for host in `cat $hosts`; do list_of_hosts="$list_of_hosts\e[0m\e[33m$host, "; done
list_of_hosts=`echo $list_of_hosts |sed 's/.$//'` #removing last ","
list_of_hosts="$list_of_hosts\e[0m";
echo -e "$list_of_hosts";

echo "";

fmt="|\e[1m%-12s\e[0m|\e[1m%-17s\e[0m|\e[1m%-45s\e[0m|\n"

#echo ".----------------------------------------------------------."
printf "$fmt" " time " " IP address " " type of scan completed ";
printf "$fmt" "------------" "-----------------" "------------------------------------------------"

#PARALLELIZING

fmt="| \e[93m\e[1m%-10s\e[0m | \e[33m%-15s\e[0m | %-43s |\n" #used in scan() function!!!

for host in $(cat $1); do
        scan $host &
done

wait;

sleep 1;

echo "";
script_end=`date +%s`;
echo -e "<> \e[1mScript completed in $((script_end - script_start)) seconds\e[0m";
echo "";
