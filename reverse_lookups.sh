#!/bin/bash

#https://github.com/Plotkine/Pentesting

#Description

#colors: white=\e[97m red=\e[91m green=\e[92m light grey=\e[37m
#fonts: normal= \033[0m bold=\033[1m

# CHECKS

#number of parameters check
if (( $#<3 || $#>3 ))
then
        echo -e "\e[92mUsage:\e[97m bash reverse_lookups.sh [DNS server] [network address] [network mask]" #green
        echo -e "\e[92mExample: bash reverse_lookups.sh 172.16.5.31 172.16.5.0 255.255.255.0" #green
        exit 0
fi

#ping DNS Server
ping $1 -c 1 -q -W 3 &>/dev/null #trying to reach the URL within 3 seconds
                         #&>/dev/null = >/dev/null 2>&1 = redirecting STDERR and STDOUT to /dev/null
if [ "$?" != "0" ]
then
   echo -e "\e[97mError: \e[91mDNS server unreachable\e[97m" #red
   exit 0
else
        echo -e "\e[92mDNS server reachable\e[97m"
fi

#----------------------------------------------

#CONVERT DECIMAL ADDRESS TO BINARY
#with padding and without dots

#Conversions dec->bin and bin->dec
dec2bin () {
    num="$1"
    bin=""
    base2=(0 1)
    while [ "$num" -gt 0 ];
    do
            bin=${base2[$(($num % 2))]}$bin
            num=$(($num / 2))
    done
    echo $bin
}

#Left padding to 8 chars
pad8 () {
    num="$1"
    while [ ${#num} -ne 8 ]
    do
        num="0$num"
    done
    echo $num
}

#Converting in binary and padding
dec2bin_pad () {
        echo "$(pad8 $(dec2bin $1))"
}

#Get a part of a network or mask address
getpart () {
        echo $1 |cut -d"." -f$2 # $1=address ; $2=part
}

getpart_dec2bin_pad () {
        echo "$(dec2bin_pad $(getpart $1 $2))" # $1=address ; $2=part
}

#Convert address to binary
convert_to_binary () {
        res=""
        for i in {1..4}
        do
                res="$res$(getpart_dec2bin_pad $1 $i)" # $1=address
        done
        echo $res
}
#--------------------------------------------------------------

#CONVERTING BINARY ADDRESS TO DECIMAL
#adding dots

convert_to_decimal() {
        res=""
        for i in {0..2}
        do
                res="$res$((2#${1:$((i*8)):8}))." # $((#2<number>)) = binary conversion
        done
        echo "$res$((2#${1:24:8}))"
}
#--------------------------------------------------------------
#CALCULATE NUMBER OF NETWORK BITS

number_of_network_bits () {
	mask=$1
        res=0
	while [ $res != ${#mask} ] && [ ${mask:$res:1} == 1 ]
	do
		res=$((res+1))
	done
	echo $res
}

#--------------------------------------------------------------

#LIST HOSTS

output_hosts() {
        if [[ "$2" ==  "${#1}" ]] #index out of scope
        then
                echo "$(convert_to_decimal $1)"
        else
                output_hosts $1 $(($2+1)) #fixing the bit at $index

                #length before index = $index
                #length after index=(length of the address)-(length before index)-1
                new_address=${1:0:$2}1${1:$(($2+1)):$((${#1}-$index-1))}
                output_hosts $new_address $(($2+1))
        fi
}

#-------------------------------------------------------------
export network=$(convert_to_binary $1)
export mask=$(convert_to_binary $2)
export DNSServer=$3

export number_network_bits=$(number_of_network_bits $mask)
export hosts=$(output_hosts $network $number_network_bits)


for host in hosts
do
        export output=`sudo dig @$DNSServer -x $host +nocookie |grep PTR |cut -d"R" -f2`
        if [ "$output" != "" ]
        then
                echo "$host:"
	        echo "$output"
        fi
done
